function [start_trial_frame,start_stim_frame, response_frame] = get_gpio_frame_data(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [MINISCOPESYNC,STARTOFTRIAL,CENTERNOSEPOKE,SIDENOSEPOKE] =
%   IMPORTFILE(FILENAME) Reads data from text file FILENAME for the default
%   selection.
%
%   [MINISCOPESYNC,STARTOFTRIAL,CENTERNOSEPOKE,SIDENOSEPOKE] =
%   IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [MiniscopeSync,Startoftrial,Centernosepoke,Sidenosepoke] = importfile('anton1_20190316.csv',1, 60851);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2019/03/18 19:51:45

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Format for each line of text:
%   column2: double (%f)
%	column3: double (%f)
%   column4: double (%f)
%	column5: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*q%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
MiniscopeSync = dataArray{:, 1};
Startoftrial = dataArray{:, 2};
Centernosepoke = dataArray{:, 3};
Sidenosepoke = dataArray{:, 4};


mss = find(diff(MiniscopeSync)==1); % indices where frame occurs
st = find(diff(Startoftrial)==-1); % indices where start of trial (center nosepoke)occurs
ss = find(diff(Centernosepoke)==1);
rt = find(diff(Sidenosepoke)==1); % indicies of side nose poke

frames = 1:length(mss);

% find closest frame for start of trial
start_trial_frame = [];
for i = 1:length(st)
 [~,ind] = min(abs(mss-st(i)));
 start_trial_frame = [start_trial_frame frames(ind)];
end

% find next response time
response_frame = [];
for i = 1:length(st)
    try
     ind = find(rt>st(i),1,'first');
     [~,ind] = min(abs(mss-rt(ind)));
     response_frame = [response_frame frames(ind)];  
    catch
    end
end


start_stim_frame = [];
for i = 1:length(st)
    try
     ind = find(ss>st(i),1,'first');
     [~,ind] = min(abs(mss-ss(ind)));
     start_stim_frame = [start_stim_frame frames(ind)];  
    catch
    end
end


if length(start_trial_frame)>length(response_frame)
    start_trial_frame = start_trial_frame(1:length(response_frame));
    
end



